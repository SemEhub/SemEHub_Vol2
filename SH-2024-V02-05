#A Python Program to compute the Diffusion Current for Holes and Electrons
#ID: SH-2024-V02-05
#Contributors: Soham Chowdhury, Deepjyoti Deb, Rupam Goswami, Santanu Sharma
#Affiliation: TSDL, Department of Electronics and Communication Engineering, Tezpur University
#This work is licensed under Creative Commons Attribution-ShareAlike 4.0 International

import numpy as np
import matplotlib.pyplot as plt

# Constants
q = 1.6e-19  
Dn = 25e-4  # Electron diffusion coefficient 
Dp = 10e-4  # Hole diffusion coefficient 

#spatial axis (x) and carrier concentrations
x = np.linspace(0, 1e-4, 1000)  # Spatial axis (m)
n = 1e16 * np.exp(-x / 2e-5)  #electron concentration (m^-3)
p = 1e16 * np.exp(-x / 3e-5)  #hole concentration (m^-3)

# Computing dn/dx and dp/dx using numpy.gradient (numerical differentiation)
dn_dx = np.gradient(n, x)
dp_dx = np.gradient(p, x)

# Diffusion current densities
Jn_diffusion = q * Dn * dn_dx
Jp_diffusion = -q * Dp * dp_dx

# Plotting dn/dx and dp/dx
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(x * 1e6, dn_dx, label=r"$\frac{dn}{dx}$", color="blue")
plt.title("Electron Concentration Gradient ($dn/dx$)")
plt.xlabel("Position x (µm)")
plt.ylabel("Gradient $dn/dx$ (m^-4)")
plt.grid(True, linestyle="--", linewidth=0.5)
plt.legend()
plt.subplot(1, 2, 2)
plt.plot(x * 1e6, dp_dx, label=r"$\frac{dp}{dx}$", color="red")
plt.title("Hole Concentration Gradient ($dp/dx$)")
plt.xlabel("Position x (µm)")
plt.ylabel("Gradient $dp/dx$ (m^-4)")
plt.grid(True, linestyle="--", linewidth=0.5)
plt.legend()
plt.tight_layout()
plt.show()
