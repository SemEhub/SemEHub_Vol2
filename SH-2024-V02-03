#A Python Program to compute the Carrier Concentration at extremely low and high temperatures
#ID: SH-2024-V02-03
#Contributors: Soham Chowdhury, Deepjyoti Deb, Rupam Goswami, Santanu Sharma
#Affiliation: TSDL, Department of Electronics and Communication Engineering, Tezpur University
#This work is licensed under Creative Commons Attribution-ShareAlike 4.0 International   

import numpy as np
import matplotlib.pyplot as plt

# Constants
k = 8.617e-5  # Boltzmann constant (eV/K)
Ec_minus_Ed = 0.05  # Energy difference between conduction band and donor level (eV)
Nc = 2.8e19   # Effective density of states in conduction band 
Nd = 1e16     # Donor concentration 
ni = 1.5e10   # Intrinsic carrier concentration for silicon

# Temperature range
T = np.linspace(10, 1000, 1000)  
inv_T = 1 / T  # Inverse temperature (1/K)

# Freeze-out regime (low T)
n_freeze_out = np.sqrt((Nc * Nd) / 2) * np.exp(-Ec_minus_Ed / (2 * k * T))

# Intrinsic regime (constant ni dominates)
n_intrinsic = ni * np.ones_like(T)  # (constant)

# Total carrier concentration (smooth transition between regimes)
n_total = np.maximum(n_freeze_out, n_intrinsic)
plt.figure(figsize=(10, 6))

# Freeze-out regime line
plt.plot(inv_T, np.log(n_freeze_out), label="Freeze-Out Regime", color="blue", linestyle="--")

# Intrinsic regime line
plt.plot(inv_T, np.log(n_intrinsic), label="Intrinsic Regime", color="red", linestyle="--")
plt.plot(inv_T, np.log(n_total), label="Combined $n$ (Dominant Regime)", color="green")

# Adding labels
plt.title(r"Natural Logarithm of Electron Concentration $\ln(n)$ vs $1/T$", fontsize=14)
plt.xlabel(r"Inverse Temperature $1/T$ (1/K)", fontsize=12)
plt.ylabel(r"$\ln(n)$", fontsize=12)
plt.axvline(x=1 / 500, color="purple", linestyle=":", label="Transition Region")
plt.axvline(x=1 / 200, color="purple", linestyle=":")
plt.text(1 / 300, 24, "Freeze-Out", color="blue", fontsize=10)
plt.text(1 / 700, 24, "Intrinsic", color="red", fontsize=10)
plt.legend(fontsize=10, loc="lower left")
plt.grid(True, linestyle="--", alpha=0.6)
plt.tight_layout()
plt.show()
